/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.chousik.is.api;

import org.springframework.lang.Nullable;
import ru.chousik.is.dto.request.StudyGroupAddRequest;
import ru.chousik.is.dto.request.StudyGroupUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-12T18:03:55.081030+03:00[Europe/Moscow]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "StudyGroups", description = "the StudyGroups API")
public interface StudyGroupsApi {

    public static final String PATH_API_V1_STUDY_GROUPS_BY_IDS_GET = "/api/v1/study-groups/by-ids";
    /**
     * GET /api/v1/study-groups/by-ids : Получить несколько учебных групп
     *
     * @param ids  (required)
     * @return Список групп (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsByIdsGet",
        summary = "Получить несколько учебных групп",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список групп", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_BY_IDS_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ru.chousik.is.dto.response.StudyGroupResponse>> apiV1StudyGroupsByIdsGet(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids
    );


    public static final String PATH_API_V1_STUDY_GROUPS_BY_SEMESTER_DELETE = "/api/v1/study-groups/by-semester";
    /**
     * DELETE /api/v1/study-groups/by-semester : Удалить все группы по семестру
     *
     * @param semesterEnum  (required)
     * @return Количество удалённых групп (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsBySemesterDelete",
        summary = "Удалить все группы по семестру",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Количество удалённых групп", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_BY_SEMESTER_DELETE,
        produces = { "application/json" }
    )
    
    ResponseEntity<Long> apiV1StudyGroupsBySemesterDelete(
        @NotNull @Parameter(name = "semesterEnum", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "semesterEnum", required = true) Semester semesterEnum
    );


    public static final String PATH_API_V1_STUDY_GROUPS_BY_SEMESTER_ONE_DELETE = "/api/v1/study-groups/by-semester/one";
    /**
     * DELETE /api/v1/study-groups/by-semester/one : Удалить одну группу по семестру
     *
     * @param semesterEnum  (required)
     * @return Удалённая группа (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsBySemesterOneDelete",
        summary = "Удалить одну группу по семестру",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Удалённая группа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_BY_SEMESTER_ONE_DELETE,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupResponse> apiV1StudyGroupsBySemesterOneDelete(
        @NotNull @Parameter(name = "semesterEnum", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "semesterEnum", required = true) Semester semesterEnum
    );


    public static final String PATH_API_V1_STUDY_GROUPS_DELETE = "/api/v1/study-groups";
    /**
     * DELETE /api/v1/study-groups : Массово удалить учебные группы
     *
     * @param ids  (required)
     * @return Группы удалены (status code 204)
     */
    @Operation(
        operationId = "apiV1StudyGroupsDelete",
        summary = "Массово удалить учебные группы",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Группы удалены")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_DELETE
    )
    
    ResponseEntity<Void> apiV1StudyGroupsDelete(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids
    );


    public static final String PATH_API_V1_STUDY_GROUPS_GET = "/api/v1/study-groups";
    /**
     * GET /api/v1/study-groups : Получить список учебных групп
     *
     * @param page Номер страницы (0-based) (optional)
     * @param size Размер страницы (optional)
     * @param sort Нативный параметр Spring для сортировки (optional)
     * @param sortBy Поле сортировки (optional)
     * @param direction Направление сортировки (optional)
     * @return Список учебных групп (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsGet",
        summary = "Получить список учебных групп",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список учебных групп", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.data.web.PagedModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<org.springframework.data.web.PagedModel> apiV1StudyGroupsGet(
        @Min(0) @Parameter(name = "page", description = "Номер страницы (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) @Nullable Integer page,
        @Min(1) @Parameter(name = "size", description = "Размер страницы", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) @Nullable Integer size,
        @Parameter(name = "sort", description = "Нативный параметр Spring для сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) @Nullable String sort,
        @Parameter(name = "sortBy", description = "Поле сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) @Nullable String sortBy,
        @Parameter(name = "direction", description = "Направление сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "direction", required = false) @Nullable String direction
    );


    public static final String PATH_API_V1_STUDY_GROUPS_ID_DELETE = "/api/v1/study-groups/{id}";
    /**
     * DELETE /api/v1/study-groups/{id} : Удалить учебную группу
     *
     * @param id  (required)
     * @return Удалённая группа (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsIdDelete",
        summary = "Удалить учебную группу",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Удалённая группа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_ID_DELETE,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupResponse> apiV1StudyGroupsIdDelete(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    public static final String PATH_API_V1_STUDY_GROUPS_ID_GET = "/api/v1/study-groups/{id}";
    /**
     * GET /api/v1/study-groups/{id} : Получить учебную группу по идентификатору
     *
     * @param id  (required)
     * @return Найденная группа (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsIdGet",
        summary = "Получить учебную группу по идентификатору",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Найденная группа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_ID_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupResponse> apiV1StudyGroupsIdGet(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    public static final String PATH_API_V1_STUDY_GROUPS_ID_PATCH = "/api/v1/study-groups/{id}";
    /**
     * PATCH /api/v1/study-groups/{id} : Обновить учебную группу
     *
     * @param id  (required)
     * @param studyGroupUpdateRequest  (required)
     * @return Обновлённая группа (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsIdPatch",
        summary = "Обновить учебную группу",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Обновлённая группа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_ID_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupResponse> apiV1StudyGroupsIdPatch(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "StudyGroupUpdateRequest", description = "", required = true) @Valid @RequestBody StudyGroupUpdateRequest studyGroupUpdateRequest
    );


    public static final String PATH_API_V1_STUDY_GROUPS_PATCH = "/api/v1/study-groups";
    /**
     * PATCH /api/v1/study-groups : Массово обновить учебные группы
     *
     * @param ids  (required)
     * @param studyGroupUpdateRequest  (required)
     * @return Обновлённые группы (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsPatch",
        summary = "Массово обновить учебные группы",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Обновлённые группы", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<List<ru.chousik.is.dto.response.StudyGroupResponse>> apiV1StudyGroupsPatch(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids,
        @Parameter(name = "StudyGroupUpdateRequest", description = "", required = true) @Valid @RequestBody StudyGroupUpdateRequest studyGroupUpdateRequest
    );


    public static final String PATH_API_V1_STUDY_GROUPS_POST = "/api/v1/study-groups";
    /**
     * POST /api/v1/study-groups : Создать учебную группу
     *
     * @param studyGroupAddRequest  (required)
     * @return Созданная группа (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsPost",
        summary = "Создать учебную группу",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Созданная группа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupResponse> apiV1StudyGroupsPost(
        @Parameter(name = "StudyGroupAddRequest", description = "", required = true) @Valid @RequestBody StudyGroupAddRequest studyGroupAddRequest
    );


    public static final String PATH_API_V1_STUDY_GROUPS_STATS_EXPELLED_TOTAL_GET = "/api/v1/study-groups/stats/expelled-total";
    /**
     * GET /api/v1/study-groups/stats/expelled-total : Посчитать общее число отчисленных студентов
     *
     * @return Общее количество отчисленных студентов (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsStatsExpelledTotalGet",
        summary = "Посчитать общее число отчисленных студентов",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Общее количество отчисленных студентов", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupExpelledTotalResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_STATS_EXPELLED_TOTAL_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.StudyGroupExpelledTotalResponse> apiV1StudyGroupsStatsExpelledTotalGet(
        
    );


    public static final String PATH_API_V1_STUDY_GROUPS_STATS_SHOULD_BE_EXPELLED_GET = "/api/v1/study-groups/stats/should-be-expelled";
    /**
     * GET /api/v1/study-groups/stats/should-be-expelled : Группировка по shouldBeExpelled
     *
     * @return Статистика по полю shouldBeExpelled (status code 200)
     */
    @Operation(
        operationId = "apiV1StudyGroupsStatsShouldBeExpelledGet",
        summary = "Группировка по shouldBeExpelled",
        tags = { "StudyGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Статистика по полю shouldBeExpelled", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ru.chousik.is.dto.response.StudyGroupShouldBeExpelledGroupResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudyGroupsApi.PATH_API_V1_STUDY_GROUPS_STATS_SHOULD_BE_EXPELLED_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ru.chousik.is.dto.response.StudyGroupShouldBeExpelledGroupResponse>> apiV1StudyGroupsStatsShouldBeExpelledGet(
        
    );

}
