/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.chousik.is.api;

import org.springframework.lang.Nullable;
import ru.chousik.is.dto.request.PersonAddRequest;
import ru.chousik.is.dto.request.PersonUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-12T18:03:55.081030+03:00[Europe/Moscow]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "Persons", description = "the Persons API")
public interface PersonsApi {

    public static final String PATH_API_V1_PERSONS_BY_IDS_GET = "/api/v1/persons/by-ids";
    /**
     * GET /api/v1/persons/by-ids : Получить несколько людей
     *
     * @param ids  (required)
     * @return Список людей (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsByIdsGet",
        summary = "Получить несколько людей",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список людей", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PersonsApi.PATH_API_V1_PERSONS_BY_IDS_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ru.chousik.is.dto.response.PersonResponse>> apiV1PersonsByIdsGet(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids
    );


    public static final String PATH_API_V1_PERSONS_DELETE = "/api/v1/persons";
    /**
     * DELETE /api/v1/persons : Массово удалить людей
     *
     * @param ids  (required)
     * @return Люди удалены (status code 204)
     */
    @Operation(
        operationId = "apiV1PersonsDelete",
        summary = "Массово удалить людей",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Люди удалены")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = PersonsApi.PATH_API_V1_PERSONS_DELETE
    )
    
    ResponseEntity<Void> apiV1PersonsDelete(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids
    );


    public static final String PATH_API_V1_PERSONS_GET = "/api/v1/persons";
    /**
     * GET /api/v1/persons : Получить список людей
     *
     * @param page Номер страницы (0-based) (optional)
     * @param size Размер страницы (optional)
     * @param sort Нативный параметр Spring для сортировки (optional)
     * @param sortBy Поле сортировки (optional)
     * @param direction Направление сортировки (optional)
     * @return Список людей (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsGet",
        summary = "Получить список людей",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список людей", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.data.web.PagedModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PersonsApi.PATH_API_V1_PERSONS_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<org.springframework.data.web.PagedModel> apiV1PersonsGet(
        @Min(0) @Parameter(name = "page", description = "Номер страницы (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) @Nullable Integer page,
        @Min(1) @Parameter(name = "size", description = "Размер страницы", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) @Nullable Integer size,
        @Parameter(name = "sort", description = "Нативный параметр Spring для сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) @Nullable String sort,
        @Parameter(name = "sortBy", description = "Поле сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortBy", required = false) @Nullable String sortBy,
        @Parameter(name = "direction", description = "Направление сортировки", in = ParameterIn.QUERY) @Valid @RequestParam(value = "direction", required = false) @Nullable String direction
    );


    public static final String PATH_API_V1_PERSONS_ID_DELETE = "/api/v1/persons/{id}";
    /**
     * DELETE /api/v1/persons/{id} : Удалить человека
     *
     * @param id  (required)
     * @return Удалённый человек (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsIdDelete",
        summary = "Удалить человека",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Удалённый человек", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = PersonsApi.PATH_API_V1_PERSONS_ID_DELETE,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.PersonResponse> apiV1PersonsIdDelete(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    public static final String PATH_API_V1_PERSONS_ID_GET = "/api/v1/persons/{id}";
    /**
     * GET /api/v1/persons/{id} : Получить человека по идентификатору
     *
     * @param id  (required)
     * @return Найденный человек (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsIdGet",
        summary = "Получить человека по идентификатору",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Найденный человек", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PersonsApi.PATH_API_V1_PERSONS_ID_GET,
        produces = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.PersonResponse> apiV1PersonsIdGet(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    public static final String PATH_API_V1_PERSONS_ID_PATCH = "/api/v1/persons/{id}";
    /**
     * PATCH /api/v1/persons/{id} : Обновить человека
     *
     * @param id  (required)
     * @param personUpdateRequest  (required)
     * @return Обновлённый человек (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsIdPatch",
        summary = "Обновить человека",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Обновлённый человек", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = PersonsApi.PATH_API_V1_PERSONS_ID_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.PersonResponse> apiV1PersonsIdPatch(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "PersonUpdateRequest", description = "", required = true) @Valid @RequestBody PersonUpdateRequest personUpdateRequest
    );


    public static final String PATH_API_V1_PERSONS_PATCH = "/api/v1/persons";
    /**
     * PATCH /api/v1/persons : Массово обновить людей
     *
     * @param ids  (required)
     * @param personUpdateRequest  (required)
     * @return Обновлённые люди (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsPatch",
        summary = "Массово обновить людей",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Обновлённые люди", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = PersonsApi.PATH_API_V1_PERSONS_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<List<ru.chousik.is.dto.response.PersonResponse>> apiV1PersonsPatch(
        @NotNull @Parameter(name = "ids", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<Long> ids,
        @Parameter(name = "PersonUpdateRequest", description = "", required = true) @Valid @RequestBody PersonUpdateRequest personUpdateRequest
    );


    public static final String PATH_API_V1_PERSONS_POST = "/api/v1/persons";
    /**
     * POST /api/v1/persons : Создать человека
     *
     * @param personAddRequest  (required)
     * @return Созданный человек (status code 200)
     */
    @Operation(
        operationId = "apiV1PersonsPost",
        summary = "Создать человека",
        tags = { "Persons" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Созданный человек", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ru.chousik.is.dto.response.PersonResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = PersonsApi.PATH_API_V1_PERSONS_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ru.chousik.is.dto.response.PersonResponse> apiV1PersonsPost(
        @Parameter(name = "PersonAddRequest", description = "", required = true) @Valid @RequestBody PersonAddRequest personAddRequest
    );

}
