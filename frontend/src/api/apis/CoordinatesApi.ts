/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoordinatesAddRequest,
  CoordinatesResponse,
  CoordinatesUpdateRequest,
  PagedCoordinatesResponse,
} from '../models/index';
import {
    CoordinatesAddRequestFromJSON,
    CoordinatesAddRequestToJSON,
    CoordinatesResponseFromJSON,
    CoordinatesResponseToJSON,
    CoordinatesUpdateRequestFromJSON,
    CoordinatesUpdateRequestToJSON,
    PagedCoordinatesResponseFromJSON,
    PagedCoordinatesResponseToJSON,
} from '../models/index';

export interface ApiV1CoordinatesByIdsGetRequest {
    ids: Array<number>;
}

export interface ApiV1CoordinatesDeleteRequest {
    ids: Array<number>;
}

export interface ApiV1CoordinatesGetRequest {
    page?: number;
    size?: number;
    sort?: string;
    sortBy?: string;
    direction?: ApiV1CoordinatesGetDirectionEnum;
}

export interface ApiV1CoordinatesIdDeleteRequest {
    id: number;
}

export interface ApiV1CoordinatesIdGetRequest {
    id: number;
}

export interface ApiV1CoordinatesIdPatchRequest {
    id: number;
    coordinatesUpdateRequest: CoordinatesUpdateRequest;
}

export interface ApiV1CoordinatesPatchRequest {
    ids: Array<number>;
    coordinatesUpdateRequest: CoordinatesUpdateRequest;
}

export interface ApiV1CoordinatesPostRequest {
    coordinatesAddRequest: CoordinatesAddRequest;
}

/**
 * 
 */
export class CoordinatesApi extends runtime.BaseAPI {

    /**
     * Получить несколько координат
     */
    async apiV1CoordinatesByIdsGetRaw(requestParameters: ApiV1CoordinatesByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoordinatesResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1CoordinatesByIdsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/coordinates/by-ids`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoordinatesResponseFromJSON));
    }

    /**
     * Получить несколько координат
     */
    async apiV1CoordinatesByIdsGet(requestParameters: ApiV1CoordinatesByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoordinatesResponse>> {
        const response = await this.apiV1CoordinatesByIdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово удалить координаты
     */
    async apiV1CoordinatesDeleteRaw(requestParameters: ApiV1CoordinatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1CoordinatesDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/coordinates`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Массово удалить координаты
     */
    async apiV1CoordinatesDelete(requestParameters: ApiV1CoordinatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1CoordinatesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Возвращает постраничный список координат с сортировкой.
     * Получить список координат
     */
    async apiV1CoordinatesGetRaw(requestParameters: ApiV1CoordinatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedCoordinatesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/coordinates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedCoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает постраничный список координат с сортировкой.
     * Получить список координат
     */
    async apiV1CoordinatesGet(requestParameters: ApiV1CoordinatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedCoordinatesResponse> {
        const response = await this.apiV1CoordinatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить координаты
     */
    async apiV1CoordinatesIdDeleteRaw(requestParameters: ApiV1CoordinatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1CoordinatesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/coordinates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Удалить координаты
     */
    async apiV1CoordinatesIdDelete(requestParameters: ApiV1CoordinatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatesResponse> {
        const response = await this.apiV1CoordinatesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить координаты по идентификатору
     */
    async apiV1CoordinatesIdGetRaw(requestParameters: ApiV1CoordinatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1CoordinatesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/coordinates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Получить координаты по идентификатору
     */
    async apiV1CoordinatesIdGet(requestParameters: ApiV1CoordinatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatesResponse> {
        const response = await this.apiV1CoordinatesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить координаты
     */
    async apiV1CoordinatesIdPatchRaw(requestParameters: ApiV1CoordinatesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1CoordinatesIdPatch().'
            );
        }

        if (requestParameters['coordinatesUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'coordinatesUpdateRequest',
                'Required parameter "coordinatesUpdateRequest" was null or undefined when calling apiV1CoordinatesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/coordinates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesUpdateRequestToJSON(requestParameters['coordinatesUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Обновить координаты
     */
    async apiV1CoordinatesIdPatch(requestParameters: ApiV1CoordinatesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatesResponse> {
        const response = await this.apiV1CoordinatesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово обновить координаты
     */
    async apiV1CoordinatesPatchRaw(requestParameters: ApiV1CoordinatesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoordinatesResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1CoordinatesPatch().'
            );
        }

        if (requestParameters['coordinatesUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'coordinatesUpdateRequest',
                'Required parameter "coordinatesUpdateRequest" was null or undefined when calling apiV1CoordinatesPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/coordinates`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesUpdateRequestToJSON(requestParameters['coordinatesUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoordinatesResponseFromJSON));
    }

    /**
     * Массово обновить координаты
     */
    async apiV1CoordinatesPatch(requestParameters: ApiV1CoordinatesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoordinatesResponse>> {
        const response = await this.apiV1CoordinatesPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создать координаты
     */
    async apiV1CoordinatesPostRaw(requestParameters: ApiV1CoordinatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoordinatesResponse>> {
        if (requestParameters['coordinatesAddRequest'] == null) {
            throw new runtime.RequiredError(
                'coordinatesAddRequest',
                'Required parameter "coordinatesAddRequest" was null or undefined when calling apiV1CoordinatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/coordinates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesAddRequestToJSON(requestParameters['coordinatesAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoordinatesResponseFromJSON(jsonValue));
    }

    /**
     * Создать координаты
     */
    async apiV1CoordinatesPost(requestParameters: ApiV1CoordinatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoordinatesResponse> {
        const response = await this.apiV1CoordinatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1CoordinatesGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ApiV1CoordinatesGetDirectionEnum = typeof ApiV1CoordinatesGetDirectionEnum[keyof typeof ApiV1CoordinatesGetDirectionEnum];
