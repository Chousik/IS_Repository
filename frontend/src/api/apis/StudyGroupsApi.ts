/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedStudyGroupResponse,
  Semester,
  StudyGroupAddRequest,
  StudyGroupExpelledTotalResponse,
  StudyGroupResponse,
  StudyGroupShouldBeExpelledGroupResponse,
  StudyGroupUpdateRequest,
} from '../models/index';
import {
    PagedStudyGroupResponseFromJSON,
    PagedStudyGroupResponseToJSON,
    SemesterFromJSON,
    SemesterToJSON,
    StudyGroupAddRequestFromJSON,
    StudyGroupAddRequestToJSON,
    StudyGroupExpelledTotalResponseFromJSON,
    StudyGroupExpelledTotalResponseToJSON,
    StudyGroupResponseFromJSON,
    StudyGroupResponseToJSON,
    StudyGroupShouldBeExpelledGroupResponseFromJSON,
    StudyGroupShouldBeExpelledGroupResponseToJSON,
    StudyGroupUpdateRequestFromJSON,
    StudyGroupUpdateRequestToJSON,
} from '../models/index';

export interface ApiV1StudyGroupsByIdsGetRequest {
    ids: Array<number>;
}

export interface ApiV1StudyGroupsBySemesterDeleteRequest {
    semesterEnum: Semester;
}

export interface ApiV1StudyGroupsBySemesterOneDeleteRequest {
    semesterEnum: Semester;
}

export interface ApiV1StudyGroupsDeleteRequest {
    ids: Array<number>;
}

export interface ApiV1StudyGroupsGetRequest {
    page?: number;
    size?: number;
    sort?: string;
    sortBy?: string;
    direction?: ApiV1StudyGroupsGetDirectionEnum;
}

export interface ApiV1StudyGroupsIdDeleteRequest {
    id: number;
}

export interface ApiV1StudyGroupsIdGetRequest {
    id: number;
}

export interface ApiV1StudyGroupsIdPatchRequest {
    id: number;
    studyGroupUpdateRequest: StudyGroupUpdateRequest;
}

export interface ApiV1StudyGroupsPatchRequest {
    ids: Array<number>;
    studyGroupUpdateRequest: StudyGroupUpdateRequest;
}

export interface ApiV1StudyGroupsPostRequest {
    studyGroupAddRequest: StudyGroupAddRequest;
}

/**
 * 
 */
export class StudyGroupsApi extends runtime.BaseAPI {

    /**
     * Получить несколько учебных групп
     */
    async apiV1StudyGroupsByIdsGetRaw(requestParameters: ApiV1StudyGroupsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudyGroupResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1StudyGroupsByIdsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/by-ids`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudyGroupResponseFromJSON));
    }

    /**
     * Получить несколько учебных групп
     */
    async apiV1StudyGroupsByIdsGet(requestParameters: ApiV1StudyGroupsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudyGroupResponse>> {
        const response = await this.apiV1StudyGroupsByIdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить все группы по семестру
     */
    async apiV1StudyGroupsBySemesterDeleteRaw(requestParameters: ApiV1StudyGroupsBySemesterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['semesterEnum'] == null) {
            throw new runtime.RequiredError(
                'semesterEnum',
                'Required parameter "semesterEnum" was null or undefined when calling apiV1StudyGroupsBySemesterDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['semesterEnum'] != null) {
            queryParameters['semesterEnum'] = requestParameters['semesterEnum'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/by-semester`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удалить все группы по семестру
     */
    async apiV1StudyGroupsBySemesterDelete(requestParameters: ApiV1StudyGroupsBySemesterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.apiV1StudyGroupsBySemesterDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить одну группу по семестру
     */
    async apiV1StudyGroupsBySemesterOneDeleteRaw(requestParameters: ApiV1StudyGroupsBySemesterOneDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupResponse>> {
        if (requestParameters['semesterEnum'] == null) {
            throw new runtime.RequiredError(
                'semesterEnum',
                'Required parameter "semesterEnum" was null or undefined when calling apiV1StudyGroupsBySemesterOneDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['semesterEnum'] != null) {
            queryParameters['semesterEnum'] = requestParameters['semesterEnum'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/by-semester/one`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Удалить одну группу по семестру
     */
    async apiV1StudyGroupsBySemesterOneDelete(requestParameters: ApiV1StudyGroupsBySemesterOneDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupResponse> {
        const response = await this.apiV1StudyGroupsBySemesterOneDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово удалить учебные группы
     */
    async apiV1StudyGroupsDeleteRaw(requestParameters: ApiV1StudyGroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1StudyGroupsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Массово удалить учебные группы
     */
    async apiV1StudyGroupsDelete(requestParameters: ApiV1StudyGroupsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1StudyGroupsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Получить список учебных групп
     */
    async apiV1StudyGroupsGetRaw(requestParameters: ApiV1StudyGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedStudyGroupResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedStudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Получить список учебных групп
     */
    async apiV1StudyGroupsGet(requestParameters: ApiV1StudyGroupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedStudyGroupResponse> {
        const response = await this.apiV1StudyGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить учебную группу
     */
    async apiV1StudyGroupsIdDeleteRaw(requestParameters: ApiV1StudyGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1StudyGroupsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Удалить учебную группу
     */
    async apiV1StudyGroupsIdDelete(requestParameters: ApiV1StudyGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupResponse> {
        const response = await this.apiV1StudyGroupsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить учебную группу по идентификатору
     */
    async apiV1StudyGroupsIdGetRaw(requestParameters: ApiV1StudyGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1StudyGroupsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Получить учебную группу по идентификатору
     */
    async apiV1StudyGroupsIdGet(requestParameters: ApiV1StudyGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupResponse> {
        const response = await this.apiV1StudyGroupsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить учебную группу
     */
    async apiV1StudyGroupsIdPatchRaw(requestParameters: ApiV1StudyGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1StudyGroupsIdPatch().'
            );
        }

        if (requestParameters['studyGroupUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'studyGroupUpdateRequest',
                'Required parameter "studyGroupUpdateRequest" was null or undefined when calling apiV1StudyGroupsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/study-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StudyGroupUpdateRequestToJSON(requestParameters['studyGroupUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Обновить учебную группу
     */
    async apiV1StudyGroupsIdPatch(requestParameters: ApiV1StudyGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupResponse> {
        const response = await this.apiV1StudyGroupsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово обновить учебные группы
     */
    async apiV1StudyGroupsPatchRaw(requestParameters: ApiV1StudyGroupsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudyGroupResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1StudyGroupsPatch().'
            );
        }

        if (requestParameters['studyGroupUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'studyGroupUpdateRequest',
                'Required parameter "studyGroupUpdateRequest" was null or undefined when calling apiV1StudyGroupsPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/study-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StudyGroupUpdateRequestToJSON(requestParameters['studyGroupUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudyGroupResponseFromJSON));
    }

    /**
     * Массово обновить учебные группы
     */
    async apiV1StudyGroupsPatch(requestParameters: ApiV1StudyGroupsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudyGroupResponse>> {
        const response = await this.apiV1StudyGroupsPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создать учебную группу
     */
    async apiV1StudyGroupsPostRaw(requestParameters: ApiV1StudyGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupResponse>> {
        if (requestParameters['studyGroupAddRequest'] == null) {
            throw new runtime.RequiredError(
                'studyGroupAddRequest',
                'Required parameter "studyGroupAddRequest" was null or undefined when calling apiV1StudyGroupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/study-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudyGroupAddRequestToJSON(requestParameters['studyGroupAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupResponseFromJSON(jsonValue));
    }

    /**
     * Создать учебную группу
     */
    async apiV1StudyGroupsPost(requestParameters: ApiV1StudyGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupResponse> {
        const response = await this.apiV1StudyGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Посчитать общее число отчисленных студентов
     */
    async apiV1StudyGroupsStatsExpelledTotalGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyGroupExpelledTotalResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/stats/expelled-total`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyGroupExpelledTotalResponseFromJSON(jsonValue));
    }

    /**
     * Посчитать общее число отчисленных студентов
     */
    async apiV1StudyGroupsStatsExpelledTotalGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyGroupExpelledTotalResponse> {
        const response = await this.apiV1StudyGroupsStatsExpelledTotalGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Группировка по shouldBeExpelled
     */
    async apiV1StudyGroupsStatsShouldBeExpelledGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StudyGroupShouldBeExpelledGroupResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/study-groups/stats/should-be-expelled`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudyGroupShouldBeExpelledGroupResponseFromJSON));
    }

    /**
     * Группировка по shouldBeExpelled
     */
    async apiV1StudyGroupsStatsShouldBeExpelledGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StudyGroupShouldBeExpelledGroupResponse>> {
        const response = await this.apiV1StudyGroupsStatsShouldBeExpelledGetRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1StudyGroupsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ApiV1StudyGroupsGetDirectionEnum = typeof ApiV1StudyGroupsGetDirectionEnum[keyof typeof ApiV1StudyGroupsGetDirectionEnum];
