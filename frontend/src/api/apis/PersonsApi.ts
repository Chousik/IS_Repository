/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedPersonResponse,
  PersonAddRequest,
  PersonResponse,
  PersonUpdateRequest,
} from '../models/index';
import {
    PagedPersonResponseFromJSON,
    PagedPersonResponseToJSON,
    PersonAddRequestFromJSON,
    PersonAddRequestToJSON,
    PersonResponseFromJSON,
    PersonResponseToJSON,
    PersonUpdateRequestFromJSON,
    PersonUpdateRequestToJSON,
} from '../models/index';

export interface ApiV1PersonsByIdsGetRequest {
    ids: Array<number>;
}

export interface ApiV1PersonsDeleteRequest {
    ids: Array<number>;
}

export interface ApiV1PersonsGetRequest {
    page?: number;
    size?: number;
    sort?: string;
    sortBy?: string;
    direction?: ApiV1PersonsGetDirectionEnum;
}

export interface ApiV1PersonsIdDeleteRequest {
    id: number;
}

export interface ApiV1PersonsIdGetRequest {
    id: number;
}

export interface ApiV1PersonsIdPatchRequest {
    id: number;
    personUpdateRequest: PersonUpdateRequest;
}

export interface ApiV1PersonsPatchRequest {
    ids: Array<number>;
    personUpdateRequest: PersonUpdateRequest;
}

export interface ApiV1PersonsPostRequest {
    personAddRequest: PersonAddRequest;
}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI {

    /**
     * Получить несколько людей
     */
    async apiV1PersonsByIdsGetRaw(requestParameters: ApiV1PersonsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1PersonsByIdsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/persons/by-ids`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonResponseFromJSON));
    }

    /**
     * Получить несколько людей
     */
    async apiV1PersonsByIdsGet(requestParameters: ApiV1PersonsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonResponse>> {
        const response = await this.apiV1PersonsByIdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово удалить людей
     */
    async apiV1PersonsDeleteRaw(requestParameters: ApiV1PersonsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1PersonsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/persons`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Массово удалить людей
     */
    async apiV1PersonsDelete(requestParameters: ApiV1PersonsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1PersonsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Получить список людей
     */
    async apiV1PersonsGetRaw(requestParameters: ApiV1PersonsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPersonResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/persons`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPersonResponseFromJSON(jsonValue));
    }

    /**
     * Получить список людей
     */
    async apiV1PersonsGet(requestParameters: ApiV1PersonsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPersonResponse> {
        const response = await this.apiV1PersonsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить человека
     */
    async apiV1PersonsIdDeleteRaw(requestParameters: ApiV1PersonsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1PersonsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/persons/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseFromJSON(jsonValue));
    }

    /**
     * Удалить человека
     */
    async apiV1PersonsIdDelete(requestParameters: ApiV1PersonsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponse> {
        const response = await this.apiV1PersonsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить человека по идентификатору
     */
    async apiV1PersonsIdGetRaw(requestParameters: ApiV1PersonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1PersonsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/persons/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseFromJSON(jsonValue));
    }

    /**
     * Получить человека по идентификатору
     */
    async apiV1PersonsIdGet(requestParameters: ApiV1PersonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponse> {
        const response = await this.apiV1PersonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить человека
     */
    async apiV1PersonsIdPatchRaw(requestParameters: ApiV1PersonsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1PersonsIdPatch().'
            );
        }

        if (requestParameters['personUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'personUpdateRequest',
                'Required parameter "personUpdateRequest" was null or undefined when calling apiV1PersonsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/persons/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PersonUpdateRequestToJSON(requestParameters['personUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseFromJSON(jsonValue));
    }

    /**
     * Обновить человека
     */
    async apiV1PersonsIdPatch(requestParameters: ApiV1PersonsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponse> {
        const response = await this.apiV1PersonsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово обновить людей
     */
    async apiV1PersonsPatchRaw(requestParameters: ApiV1PersonsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1PersonsPatch().'
            );
        }

        if (requestParameters['personUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'personUpdateRequest',
                'Required parameter "personUpdateRequest" was null or undefined when calling apiV1PersonsPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/persons`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PersonUpdateRequestToJSON(requestParameters['personUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonResponseFromJSON));
    }

    /**
     * Массово обновить людей
     */
    async apiV1PersonsPatch(requestParameters: ApiV1PersonsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonResponse>> {
        const response = await this.apiV1PersonsPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создать человека
     */
    async apiV1PersonsPostRaw(requestParameters: ApiV1PersonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponse>> {
        if (requestParameters['personAddRequest'] == null) {
            throw new runtime.RequiredError(
                'personAddRequest',
                'Required parameter "personAddRequest" was null or undefined when calling apiV1PersonsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/persons`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonAddRequestToJSON(requestParameters['personAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseFromJSON(jsonValue));
    }

    /**
     * Создать человека
     */
    async apiV1PersonsPost(requestParameters: ApiV1PersonsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponse> {
        const response = await this.apiV1PersonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1PersonsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ApiV1PersonsGetDirectionEnum = typeof ApiV1PersonsGetDirectionEnum[keyof typeof ApiV1PersonsGetDirectionEnum];
