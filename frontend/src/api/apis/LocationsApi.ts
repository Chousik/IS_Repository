/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationAddRequest,
  LocationResponse,
  LocationUpdateRequest,
  PagedLocationResponse,
} from '../models/index';
import {
    LocationAddRequestFromJSON,
    LocationAddRequestToJSON,
    LocationResponseFromJSON,
    LocationResponseToJSON,
    LocationUpdateRequestFromJSON,
    LocationUpdateRequestToJSON,
    PagedLocationResponseFromJSON,
    PagedLocationResponseToJSON,
} from '../models/index';

export interface ApiV1LocationsByIdsGetRequest {
    ids: Array<number>;
}

export interface ApiV1LocationsDeleteRequest {
    ids: Array<number>;
}

export interface ApiV1LocationsGetRequest {
    page?: number;
    size?: number;
    sort?: string;
    sortBy?: string;
    direction?: ApiV1LocationsGetDirectionEnum;
}

export interface ApiV1LocationsIdDeleteRequest {
    id: number;
}

export interface ApiV1LocationsIdGetRequest {
    id: number;
}

export interface ApiV1LocationsIdPatchRequest {
    id: number;
    locationUpdateRequest: LocationUpdateRequest;
}

export interface ApiV1LocationsPatchRequest {
    ids: Array<number>;
    locationUpdateRequest: LocationUpdateRequest;
}

export interface ApiV1LocationsPostRequest {
    locationAddRequest: LocationAddRequest;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     * Получить несколько локаций
     */
    async apiV1LocationsByIdsGetRaw(requestParameters: ApiV1LocationsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1LocationsByIdsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/locations/by-ids`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationResponseFromJSON));
    }

    /**
     * Получить несколько локаций
     */
    async apiV1LocationsByIdsGet(requestParameters: ApiV1LocationsByIdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.apiV1LocationsByIdsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово удалить локации
     */
    async apiV1LocationsDeleteRaw(requestParameters: ApiV1LocationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1LocationsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/locations`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Массово удалить локации
     */
    async apiV1LocationsDelete(requestParameters: ApiV1LocationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1LocationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Получить список локаций
     */
    async apiV1LocationsGetRaw(requestParameters: ApiV1LocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedLocationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/locations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedLocationResponseFromJSON(jsonValue));
    }

    /**
     * Получить список локаций
     */
    async apiV1LocationsGet(requestParameters: ApiV1LocationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedLocationResponse> {
        const response = await this.apiV1LocationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить локацию
     */
    async apiV1LocationsIdDeleteRaw(requestParameters: ApiV1LocationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LocationsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/locations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
    }

    /**
     * Удалить локацию
     */
    async apiV1LocationsIdDelete(requestParameters: ApiV1LocationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponse> {
        const response = await this.apiV1LocationsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить локацию по идентификатору
     */
    async apiV1LocationsIdGetRaw(requestParameters: ApiV1LocationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LocationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/locations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
    }

    /**
     * Получить локацию по идентификатору
     */
    async apiV1LocationsIdGet(requestParameters: ApiV1LocationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponse> {
        const response = await this.apiV1LocationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновить локацию
     */
    async apiV1LocationsIdPatchRaw(requestParameters: ApiV1LocationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LocationsIdPatch().'
            );
        }

        if (requestParameters['locationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'locationUpdateRequest',
                'Required parameter "locationUpdateRequest" was null or undefined when calling apiV1LocationsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/locations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationUpdateRequestToJSON(requestParameters['locationUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
    }

    /**
     * Обновить локацию
     */
    async apiV1LocationsIdPatch(requestParameters: ApiV1LocationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponse> {
        const response = await this.apiV1LocationsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Массово обновить локации
     */
    async apiV1LocationsPatchRaw(requestParameters: ApiV1LocationsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling apiV1LocationsPatch().'
            );
        }

        if (requestParameters['locationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'locationUpdateRequest',
                'Required parameter "locationUpdateRequest" was null or undefined when calling apiV1LocationsPatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/locations`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationUpdateRequestToJSON(requestParameters['locationUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationResponseFromJSON));
    }

    /**
     * Массово обновить локации
     */
    async apiV1LocationsPatch(requestParameters: ApiV1LocationsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.apiV1LocationsPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создать локацию
     */
    async apiV1LocationsPostRaw(requestParameters: ApiV1LocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponse>> {
        if (requestParameters['locationAddRequest'] == null) {
            throw new runtime.RequiredError(
                'locationAddRequest',
                'Required parameter "locationAddRequest" was null or undefined when calling apiV1LocationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/locations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationAddRequestToJSON(requestParameters['locationAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationResponseFromJSON(jsonValue));
    }

    /**
     * Создать локацию
     */
    async apiV1LocationsPost(requestParameters: ApiV1LocationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponse> {
        const response = await this.apiV1LocationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1LocationsGetDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ApiV1LocationsGetDirectionEnum = typeof ApiV1LocationsGetDirectionEnum[keyof typeof ApiV1LocationsGetDirectionEnum];
