/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Color } from './Color';
import {
    ColorFromJSON,
    ColorFromJSONTyped,
    ColorToJSON,
    ColorToJSONTyped,
} from './Color';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { LocationAddRequest } from './LocationAddRequest';
import {
    LocationAddRequestFromJSON,
    LocationAddRequestFromJSONTyped,
    LocationAddRequestToJSON,
    LocationAddRequestToJSONTyped,
} from './LocationAddRequest';

/**
 * 
 * @export
 * @interface PersonAddRequest
 */
export interface PersonAddRequest {
    /**
     * 
     * @type {string}
     * @memberof PersonAddRequest
     */
    name: string;
    /**
     * 
     * @type {Color}
     * @memberof PersonAddRequest
     */
    eyeColor?: Color;
    /**
     * 
     * @type {Color}
     * @memberof PersonAddRequest
     */
    hairColor: Color;
    /**
     * 
     * @type {number}
     * @memberof PersonAddRequest
     */
    locationId?: number;
    /**
     * 
     * @type {LocationAddRequest}
     * @memberof PersonAddRequest
     */
    location?: LocationAddRequest;
    /**
     * 
     * @type {number}
     * @memberof PersonAddRequest
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof PersonAddRequest
     */
    weight: number;
    /**
     * 
     * @type {Country}
     * @memberof PersonAddRequest
     */
    nationality?: Country;
}



/**
 * Check if a given object implements the PersonAddRequest interface.
 */
export function instanceOfPersonAddRequest(value: object): value is PersonAddRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('hairColor' in value) || value['hairColor'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('weight' in value) || value['weight'] === undefined) return false;
    return true;
}

export function PersonAddRequestFromJSON(json: any): PersonAddRequest {
    return PersonAddRequestFromJSONTyped(json, false);
}

export function PersonAddRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonAddRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'eyeColor': json['eyeColor'] == null ? undefined : ColorFromJSON(json['eyeColor']),
        'hairColor': ColorFromJSON(json['hairColor']),
        'locationId': json['locationId'] == null ? undefined : json['locationId'],
        'location': json['location'] == null ? undefined : LocationAddRequestFromJSON(json['location']),
        'height': json['height'],
        'weight': json['weight'],
        'nationality': json['nationality'] == null ? undefined : CountryFromJSON(json['nationality']),
    };
}

export function PersonAddRequestToJSON(json: any): PersonAddRequest {
    return PersonAddRequestToJSONTyped(json, false);
}

export function PersonAddRequestToJSONTyped(value?: PersonAddRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'eyeColor': ColorToJSON(value['eyeColor']),
        'hairColor': ColorToJSON(value['hairColor']),
        'locationId': value['locationId'],
        'location': LocationAddRequestToJSON(value['location']),
        'height': value['height'],
        'weight': value['weight'],
        'nationality': CountryToJSON(value['nationality']),
    };
}

