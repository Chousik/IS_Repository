/* tslint:disable */
/* eslint-disable */
/**
 * IS Project API
 * Бэкенд для управления учебными группами и связанными сущностями. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoordinatesResponse } from './CoordinatesResponse';
import {
    CoordinatesResponseFromJSON,
    CoordinatesResponseFromJSONTyped,
    CoordinatesResponseToJSON,
    CoordinatesResponseToJSONTyped,
} from './CoordinatesResponse';
import type { FormOfEducation } from './FormOfEducation';
import {
    FormOfEducationFromJSON,
    FormOfEducationFromJSONTyped,
    FormOfEducationToJSON,
    FormOfEducationToJSONTyped,
} from './FormOfEducation';
import type { Semester } from './Semester';
import {
    SemesterFromJSON,
    SemesterFromJSONTyped,
    SemesterToJSON,
    SemesterToJSONTyped,
} from './Semester';
import type { PersonResponse } from './PersonResponse';
import {
    PersonResponseFromJSON,
    PersonResponseFromJSONTyped,
    PersonResponseToJSON,
    PersonResponseToJSONTyped,
} from './PersonResponse';

/**
 * 
 * @export
 * @interface StudyGroupResponse
 */
export interface StudyGroupResponse {
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof StudyGroupResponse
     */
    name: string;
    /**
     * 
     * @type {CoordinatesResponse}
     * @memberof StudyGroupResponse
     */
    coordinates: CoordinatesResponse;
    /**
     * 
     * @type {Date}
     * @memberof StudyGroupResponse
     */
    creationDate: Date;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    studentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    expelledStudents: number;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    transferredStudents: number;
    /**
     * 
     * @type {FormOfEducation}
     * @memberof StudyGroupResponse
     */
    formOfEducation?: FormOfEducation;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    shouldBeExpelled: number;
    /**
     * 
     * @type {number}
     * @memberof StudyGroupResponse
     */
    averageMark?: number;
    /**
     * 
     * @type {Semester}
     * @memberof StudyGroupResponse
     */
    semesterEnum: Semester;
    /**
     * 
     * @type {PersonResponse}
     * @memberof StudyGroupResponse
     */
    groupAdmin?: PersonResponse;
}



/**
 * Check if a given object implements the StudyGroupResponse interface.
 */
export function instanceOfStudyGroupResponse(value: object): value is StudyGroupResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('coordinates' in value) || value['coordinates'] === undefined) return false;
    if (!('creationDate' in value) || value['creationDate'] === undefined) return false;
    if (!('expelledStudents' in value) || value['expelledStudents'] === undefined) return false;
    if (!('transferredStudents' in value) || value['transferredStudents'] === undefined) return false;
    if (!('shouldBeExpelled' in value) || value['shouldBeExpelled'] === undefined) return false;
    if (!('semesterEnum' in value) || value['semesterEnum'] === undefined) return false;
    return true;
}

export function StudyGroupResponseFromJSON(json: any): StudyGroupResponse {
    return StudyGroupResponseFromJSONTyped(json, false);
}

export function StudyGroupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StudyGroupResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'coordinates': CoordinatesResponseFromJSON(json['coordinates']),
        'creationDate': (new Date(json['creationDate'])),
        'studentsCount': json['studentsCount'] == null ? undefined : json['studentsCount'],
        'expelledStudents': json['expelledStudents'],
        'transferredStudents': json['transferredStudents'],
        'formOfEducation': json['formOfEducation'] == null ? undefined : FormOfEducationFromJSON(json['formOfEducation']),
        'shouldBeExpelled': json['shouldBeExpelled'],
        'averageMark': json['averageMark'] == null ? undefined : json['averageMark'],
        'semesterEnum': SemesterFromJSON(json['semesterEnum']),
        'groupAdmin': json['groupAdmin'] == null ? undefined : PersonResponseFromJSON(json['groupAdmin']),
    };
}

export function StudyGroupResponseToJSON(json: any): StudyGroupResponse {
    return StudyGroupResponseToJSONTyped(json, false);
}

export function StudyGroupResponseToJSONTyped(value?: StudyGroupResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'coordinates': CoordinatesResponseToJSON(value['coordinates']),
        'creationDate': value['creationDate'].toISOString(),
        'studentsCount': value['studentsCount'],
        'expelledStudents': value['expelledStudents'],
        'transferredStudents': value['transferredStudents'],
        'formOfEducation': FormOfEducationToJSON(value['formOfEducation']),
        'shouldBeExpelled': value['shouldBeExpelled'],
        'averageMark': value['averageMark'],
        'semesterEnum': SemesterToJSON(value['semesterEnum']),
        'groupAdmin': PersonResponseToJSON(value['groupAdmin']),
    };
}

